plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.node-gradle.node' version '7.0.2'
}

group = 'com.stammtisch'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0")
}

dependencies {

    implementation 'org.springframework.ai:spring-ai-starter-mcp-server-webflux'




    // GitHub API client
    implementation 'org.kohsuke:github-api:1.319'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Lombok for reducing boilerplate code
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}


test {
    useJUnitPlatform()
}

// Node.js configuration
node {
    // Version of Node.js to use
    version = '20.11.0'

    // Version of npm to use
    npmVersion = '10.2.4'

    // If true, it will download Node.js and npm locally to the project
    download = true

    // Directory where Node.js will be installed
    workDir = file("${project.buildDir}/nodejs")

    // Directory where npm packages will be installed
    npmWorkDir = file("${project.buildDir}/npm")
}

// Task to verify Node.js and npm are available
task verifyNode(type: com.github.gradle.node.npm.task.NpmTask) {
    dependsOn npmSetup
    npmCommand = ['--version']
    doLast {
        println "Node.js and npx are now available!"
        println "You can now use npx commands through Gradle tasks"
    }
}

// Task to install MCP remote package
task installMcpRemote(type: com.github.gradle.node.npm.task.NpmTask) {
    dependsOn npmSetup
    description = 'Install mcp-remote package'
    npmCommand = ['install', '-g', 'mcp-remote']
}

// Task to run MCP remote server directly
task runMcpRemote(type: com.github.gradle.node.npm.task.NpxTask) {
    dependsOn installMcpRemote
    description = 'Run MCP remote server. Usage: ./gradlew runMcpRemote -PmcpUrl=http://localhost:8080/sse'
    command = 'mcp-remote'
    args = project.hasProperty('mcpUrl') ? [project.mcpUrl] : ['http://localhost:8080/sse']
    doFirst {
        println "Connecting to MCP server: ${project.hasProperty('mcpUrl') ? project.mcpUrl : 'http://localhost:8080/sse'}"
        println "Press Ctrl+C to stop the connection"
    }
}

// Task to create run scripts
task createRunScripts {
    dependsOn npmSetup
    description = 'Create run-mcp-remote scripts'
    doLast {
        println "Run scripts created:"
        println "  Windows: run-mcp-remote.bat [url]"
        println "  Linux/macOS: ./run-mcp-remote.sh [url]"
        println "  Default URL: http://localhost:8080/sse"
    }
}

// Clean up Node.js artifacts
tasks.named('clean') {
    doLast {
        delete "${project.buildDir}/nodejs"
        delete "${project.buildDir}/npm"
    }
}
